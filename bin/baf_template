#!/usr/bin/env python
#
# Management-script of the berofix UserApp framework (baf)
#
# Copyright (C) 2012 beroNet GmbH
#
# Author: Florian Kraatz <fk@beronet.com>
#
# If you have questions or want to report problems with this software,
# please write a mail to:
#
#   support@beronet.com
#

import os, sys, string, shutil, datetime, tarfile, re, tempfile, urllib2, warnings

with warnings.catch_warnings():
	warnings.simplefilter("ignore")
	try:
		import paramiko
	except ImportError:
		print "\nTo use command 'baf deploy' please install python package 'paramiko'!"


baf_conf = {}

baf_dirs = {
		'template': {
			'dir': "template",
			'sub': ["init", "setup", "bin", "lib", "www", "avahi", "cloud", "mnt"]
			},
		'pkg': {
			'dir': "pkg"
			},
		'pkginfo': {
			'dir': "pkginfo"
			},
		'modules': {
			'dir': "modules"
			},
		'module': {
			'sub': ["bin", "lib", "conf", "www", "init", "src"]
			},
		'work': {
			'dir':		"work",
			'sub':		"userapp",
			}
		}

baf_file = {
		'conf': ".baf.conf",
		'vers_meta': "VERSION_META",
		'vers': "VERSION",
		'init': "S00example",
		'cron': "S00cronexample",
		'html': "index.php",
		'fsex': "fstab.example",
		}

baf_templates = {
		baf_file['vers_meta']: {
			'TYPE': "userappfs",
			'VERSION': "1",
			'DESCRIPTION': "\"default package\"",
			'SLOTS': "1",
			'NEED_KERNEL': "1",
			'NEED_FIRMWARE': "1",
			'NEED_ROOTFS': "3",
			'NEED_APPFS': "2"
			},

		baf_file['conf']: {
			'editor': "/usr/bin/vim",
			'toolchain': "BAF_TOOLCHAIN_BASEPATH/share/baf",
			'repository': "http://developer.beronet.com/baf-modules/modlist.txt"
			},
		'module-Makefile': [
			"# Makefile skeleton for baf modules\n\n",
			"CUR_DIR\t\t:= $(shell pwd)\n",
			"TOOLCHAIN\t:= $(BAF_DIR)/toolchain/bin\n",
			"TOOLPREFX\t:= arm-linux-uclibc\n\n",
			"TOOL_INC\t:= $(BAF_DIR)/toolchain/usr/include\n",
			"TOOL_LIB\t:= $(BAF_DIR)/toolchain/lib\n",
			"TOOL_USR_LIB\t:= $(BAF_DIR)/toolchain/usr/lib\n\n",
			"BFX_INC\t\t:= $(BAF_DIR)/include\n",
			"BFX_LIB\t\t:= $(BAF_DIR)/lib\n\n",
			"CFLAGS\t\t:= \"-I$(TOOL_INC) -I$(BFX_INC)\"\n",
			"LDFLAGS\t\t:= \"-L$(TOOL_LIB) -L$(TOOL_USR_LIB) -L$(BFX_LIB)\"\n\n",
			"DEST_ROOT\t:= /userapp\n",
			"INST_PATH\t:= $(CUR_DIR)\n\n",
			"CONF_OPTS\t:= --build=$(shell uname -m) --host=$(TOOLPREFX) --prefix=$(DEST_ROOT)\n",
			"MAKE_OPTS\t:= -s\n",
			"INST_OPTS\t:= exec_prefix=$(INST_PATH) -s\n\n",
			"INST_DIRS\t:= bin conf include lib\n",
			"REMV_DIRS\t:= bin include lib\n\n",
			"all:\n",
			"\t@for dir in $(INST_DIRS); do \\\n",
			"\t\tmkdir -p $(CUR_DIR)/$$dir; \\\n",
			"\tdone\n",
			"\t@export PATH=\"$(TOOLCHAIN):$$PATH\"; \\\n",
			"\texport CC=\"$(TOOLPREFX)-gcc\"; \\\n",
			"\texport CPP=\"$(TOOLPREFX)-cpp\"; \\\n",
			"\texport CXX=\"$(TOOLPREFX)-g++\"; \\\n",
			"\texport CXXCPP=\"$(TOOLPREFX)-g++ -E\"; \\\n",
			"\texport AR=\"$(TOOLPREFX)-ar\"; \\\n",
			"\texport LD=\"$(TOOLPREFX)-ld\"; \\\n",
			"\texport NM=\"$(TOOLPREFX)-nm\"; \\\n",
			"\texport RANLIB=\"$(TOOLPREFX)-ranlib\"; \\\n",
			"\texport STRIP=\"$(TOOLPREFX)-strip\"; \\\n",
			"\texport CFLAGS=$(CFLAGS); \\\n",
			"\texport LDFLAGS=$(LDFLAGS); \\\n",
			"\tfor i in `/bin/ls $(CUR_DIR)/src`; do \\\n",
			"\t\tcd $(CUR_DIR)/src/$$i/; \\\n",
			"\t\tif [ -x configure ]; then \\\n",
			"\t\t\t./configure $(CONF_OPTS); \\\n",
			"\t\tfi; \\\n",
			"\t\tmake $(MAKE_OPTS); \\\n",
			"\tdone;\n\n",
			"install:\n",
			"\t@for i in `/bin/ls $(CUR_DIR)/src/`; do \\\n",
			"\t\tcd $(CUR_DIR)/src/$$i/; \\\n",
			"\t\tmake install $(INST_OPTS); \\\n",
			"\tdone;\n\n",
			"clean:\n",
			"\t@for dir in $(REMV_DIRS); do \\\n",
			"\t\tmkdir -p $(CUR_DIR)/$$dir; \\\n",
			"\tdone;\n",
			"\t@for i in `/bin/ls $(CUR_DIR)/src`; do \\\n",
			"\t\tcd $(CUR_DIR)/src/$$i/; \\\n",
			"\t\tmake clean $(MAKE_OPTS); \\\n",
			"\tdone;\n\n",
			],
		baf_file['init']: [
			"#!/bin/sh\n",
			"# This is an example of an init-script for an UserApp\n\n",
			"# This file won't be packed when 'baf make' is called! To use it please copy/rename this file.\n\n",
			"DISABLED=yes\n\n",
			"if [ \"${DISABLED}\" = \"yes\" ]; then\n",
			"\texit 0\n",
			"fi\n\n",
			"# check if conf in appfs relevant to us has changed\n",
			"function configuration_changed {\n\n",
			"\techo -n \"1\"\n",
			"}\n\n",
			"case \"${1}\" in\n",
			"\tstart)\n",
			"\t\techo \"Starting App...\"\n",
			"BAF_INIT_BIN",
			"\t\t;;\n",
			"\tstop)\n",
			"\t\techo \"Stopping App...\"\n",
			"BAF_KILL_BIN",
			"\t\t;;\n",
			"\trestart)\n",
			"\t\techo \"Restarting App...\"\n",
			"\t\t${0} stop\n",
			"\t\t${0} start\n",
			"\t\t;;\n",
			"\tapply)\n",
			"\t\tif [ \"$(configuration_changed)\" = \"1\" ]; then\n",
			"\t\t\t${0} restart\n",
			"\t\tfi\n",
			"\t\t;;\n",
			"\t*)\n"
			"\t\techo \"Usage ${0} [start|stop|restart]\"\n",
			"\t\texit 1\n",
			"\t\t;;\n",
			"esac\n"
			],
		baf_file['cron']: [
			"#!/bin/sh\n",
			"# This is an example for an init-script creating a cron-entry for an UserApp\n\n",
			"# This file won't be packed when 'baf make' is called! To use it please copy/rename this file.\n\n",
			"DISABLED=yes\n\n",
			"if [ \"${DISABLED}\" = \"yes\" ]; then\n",
			"\texit 0\n",
			"fi\n\n",
			"CRON_LINE_NOR=\"*/1 * * * * /apps/appname/bin/a_bin\"\n",
			"CRON_LINE_SED=\"s/\*\/1 \* \* \* \* \/apps\/appname\/bin\/a_bin//\"\n\n",
			"case \"${1}\" in\n",
			"\tstart)\n",
			"\t\techo \"Adding cron-Entry for app...\"\n",
			"\t\techo \"${CRON_LINE_NOR}\" >> /usr/conf/cron/admin\n",
			"\t\t;;\n",
			"\tstop)\n",
			"\t\techo \"Removing cron-Entry of app...\"\n",
			"\t\tsed ${CRON_LINE_SED} /usr/conf/cron/admin > /tmp/admin_cron\n",
			"\t\ttr -s '\\n' < /tmp/admin_cron > /usr/conf/cron/admin\n",
			"\t\trm -f /tmp/admin_cron\n",
			"\t\t;;\n",
			"esac\n"
			],
		baf_file['html']: [
			"<?php\n\n",
			"# Define functions below this line.\n",
			"# Define functions above this line.\n\n",
			"# Name of your app:\n",
			"$app_name = 'example';\n\n",
			"# Basepath of your app:\n",
			"$base_path = '/apps/' . $app_name;\n\n",
			"# BEGIN Session management #\n\n",
			"$redir_login = '/app/berogui/includes/login.php';\n\n",
			"@session_start();\n",
			"if (!isset($_SESSION['beroari_time'])) {\n",
			"\theader('Location:' . $redir_login . '?userapp=' . $app_name);\n",
			"\texit();\n",
			"} elseif ((isset($_SESSION['beroari_time'])) && (($_SESSION['beroari_time'] + 1200) < time())) {\n",
			"\t@session_unset();\n",
			"\t@session_destroy();\n",
			"\theader('Location:' . $redir_login . '?reason=sess_expd&userapp=' . $app_name);\n",
			"\texit();\n",
			"}\n\n",
			"unset($redir_login);\n\n",
			"$_SESSION['beroari_time'] = time();\n\n",
			"#  END session management  #\n\n",
			"echo\t\"<xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\">\\n\" .\n",
			"\t\"\\t<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\\n\" .\n",
			"\t\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\">\\n\" .\n",
			"\t\"\\t<head>\\n\" .\n",
			"\t\"\\t\\t<title>\" . $app_name . \"</title>\\n\" .\n",
			"\t\"\\t</head>\\n\" .\n",
			"\t\"\\t<body>\\n\" .\n",
			"\t\"\\t\\t<h1>\" . $app_name . \"</h1>\\n\" .\n",
			"\t\"\\t\\t<div>Fill me with content and make me pretty!</div>\\n\" .\n",
			"\t\"\\t</body>\\n\" .\n",
			"\t\"</html>\\n\";\n\n",
			"?>\n"
			],
		baf_file['fsex']: [
			"# fstab example for userapps\n",
			"# remote path\tlocal path\ttype\toptions\n",
			"//192.168.0.1/path/to/cifs\t/mnt/cifs\tcifs\tusername=someuser,password=abcd\n",
			"192.168.0.1:/path/to/nfs\t/mnt/nfs\tnfs\n"
			]
		}

baf_help = {
		'main': {
			'main': "Usage:   baf [create <appname> | module <operation> <modulename> | make | init-conf]\n\n" +
				"To get more info about a specific command, type:\n" +
				"         baf help <command>"
		},
		'create': {
			'main': "Usage:   baf create <appname>\n\n" +
				"Creates a new application in subdirectory <appname>."
		},
		'make': {
			'main': "Usage:   baf make\n\n" +
				"Compiles all enabled modules and creates an archive of this UserApp in '<appname>/pkg'."
		},
		'deploy': {
			'main': "Usage:   baf deploy <berofix_ipaddr> [<userapp_archive>]\n\n" +
				"Installs pkg/<userapp_archive> on <berofix_ipaddr>.\n" +
				"If <userapp_archive> is not given the newest archive will be taken.\n\n" +
				"Make sure to set ssh_keyfile in '.baf.conf' to a ssh key that is authorized for the root-user on berofix!"
		},
		'module': {
			'main':		"Usage:   baf module [create | compile | delete | disable | enable | install] <appname>\n" +
					"         baf module list\n" +
					"         baf module search <searchterm>\n\n" +
					"To get more info about a specific command, type:\n" +
					"         baf help module <command>",
			'create':	"Usage:   baf module create <modulename>\n\n" +
					"Creates a new module.",
			'compile':	"Usage:   baf module compile <modulename>\n\n" +
					"Compiles module given by <modulename>.",
			'delete':	"Usage:   baf module delete <modulename>\n\n" +
					"Deletes module given by <modulename>",
			'disable':	"Usage:   baf module disable <modulename>\n\n" +
					"Disables module given by <modulename>, a disabled module will not be considered by 'baf make'.",
			'enable':	"Usage:   baf module enable <modulename>\n\n" +
					"Enables a previously disabled module.",
			'install':	"Usage:   baf module install <modulename>\n\n" +
					"Installs a module from the repository.",
			'list':		"Usage:   baf module list\n\n" +
					"Lists all modules available in repository.",
			'search':	"Usage:   baf search <searchterm>\n\n" +
					"Searches for <searchterm> in repository and lists all installable modules that match."
		},
		'init-conf': {
			'main':		"Usage:   baf init-conf\n\n" +
					"Re-Inits the .baf.conf. Make sure this is executed in the root-directory of your baf-app!"
		}
	}

def baf_help_print(arg1, arg2):

	level1 = 'main'
	level2 = 'main'

	for k, v in baf_help.iteritems():
		if k == arg1:
			level1 = arg1

	for k, v in baf_help[level1].iteritems():
		if k == arg2:
				level2 = arg2

	print "\n" + baf_help[level1][level2] + "\n"

	return(0)

def baf_create_template():

	try:
		print " * creating directory 'template'..."
		os.mkdir(baf_dirs['template']['dir'])
	except OSError:
		print " ! Could not create '" + baf_dirs['template']['dir'] + "', leaving."
		return(1)
	else:
		for sub_dir in baf_dirs['template']['sub']:
			try:
				os.mkdir(baf_dirs['template']['dir'] + "/" + sub_dir)
			except OSError:
				print " ! Could not create '" + baf_dirs['template']['dir'] + "/" + sub_dir + "', leaving."
				return(1)
	finally:
		# create init example
		f_name = baf_dirs['template']['dir'] + "/init/" + baf_file['init']
		try:
			f = open(f_name, "w")
		except IOError:
			print " ! Could not open '" + f_name + "' for writing, leaving."
			return(1)
		else:
			for line in baf_templates[baf_file['init']]:
				if line == "BAF_INIT_BIN":
					f.write("\t\t/apps/" + os.path.basename(os.getcwd()) + "/bin/example\n")
				elif line == "BAF_KILL_BIN":
					f.write("\t\tkillall -9 /apps/" + os.path.basename(os.getcwd()) + "/bin/example\n")
				else:
					f.write(line)
			f.close()

		os.chmod(f_name, 0755)

		# create cron example
		f_name = baf_dirs['template']['dir'] + "/init/" + baf_file['cron']
		try:
			f = open(f_name, "w")
		except IOError:
			print " ! Could not open '" + f_name + "' for writing, leaving."
			return(1)
		else:
			for line in baf_templates[baf_file['cron']]:
				if line == "BAF_INIT_BIN":
					f.write("\t\t/apps/" + os.path.basename(os.getcwd()) + "/bin/example\n")
				elif line == "BAF_KILL_BIN":
					f.write("\t\tkillall -9 /apps/" + os.path.basename(os.getcwd()) + "/bin/example\n")
				else:
					f.write(line)
			f.close()

		os.chmod(f_name, 0755)

		# create fstab example
		f_name = baf_dirs['template']['dir'] + '/setup/' + baf_file['fsex']
		try:
			f = open(f_name, "w")
		except IOError:
			print " ! Could not open '" + f_name + "' for writing, leaving."
			return(1)
		else:
			for line in baf_templates[baf_file['fsex']]:
				f.write(line)
			f.close()

		os.chmod(f_name, 0644)

		# create html example
		f_name = baf_dirs['template']['dir'] + "/www/" + baf_file['html']
		try:
			f = open(f_name, "w")
		except IOError:
			print " ! Could not open '" + f_name + "' for writing, leaving."
			return(1)
		else:
			for line in baf_templates[baf_file['html']]:
				f.write(line)
			f.close()

		os.chmod(f_name, 0644)

	return(0)

def baf_create_pkginfo():

	try:
		print " * creating directory 'pkginfo'..."
		os.mkdir(baf_dirs['pkginfo']['dir'])
	except OSError:
		print " ! Could not create '" + baf_dirs['pkginfo']['dir'] + "', leaving."
		return(1)
	else:
		f_name = baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers_meta']
		try:
			f = open(f_name, "w")
		except IOError:
			print " ! Could not open '" + f_name + "' for writing, leaving."
			return(1);
		else:
			f.write("NAME=" + os.path.basename(os.getcwd()) + "\n");
			for k, v in baf_templates[baf_file['vers_meta']].iteritems():
				f.write(k + "=" + v + "\n")

			f.flush()
			f.close()
	finally:
		return(0)

def baf_get_version_template_name():

	if os.path.exists(baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers_meta']):
		vers_path = baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers_meta']
	else:
		vers_path = baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers']

	return(vers_path)

def baf_create(name):

	if not len(name):
		print " ! no repository name given, leaving."
		return(1)

	if os.path.exists(name):
		print " ! a directory named '" + name + "' already exists, leaving."
		return(1)

	try:
		os.mkdir(name)
	except OSError:
		print " ! Could not create '" + name + "', leaving."
		return(1)
	else:
		os.chdir(name)
		baf_conf_init()

		try:
			print " * creating directory 'modules'..."
			os.mkdir(baf_dirs['modules']['dir'])
		except OSError:
			print " ! Could not create " + baf_dirs['modules']['dir'] + ", leaving."
			return(1)

		try:
			print " * creating directory 'pkg'..."
			os.mkdir(baf_dirs['pkg']['dir'])
		except OSError:
			print " ! Could not create " + baf_dirs['pkg']['dir'] + ", leaving."
			return(1)

		if baf_create_pkginfo():
			return(1)

		if baf_create_template():
			return(1)
	finally:
		return(0)

def baf_info_update():

	cmd = baf_conf['editor'] + " " + baf_get_version_template_name()
	try:
		os.system(cmd)
	except OSError:
		print " ! Could not execute '" + cmd + "', leaving."
		print " ! Please check the editor-setting in '.baf.conf'."
		return(1)

	return(0)

def baf_package_get_name():

	vers_path = baf_get_version_template_name()

	try:
		f = open(vers_path, "r")
	except IOError:
		print " ! Could not open '" + vers_path + "' for reading, leaving."
		return(False)
	else:
		c = f.read()
		f.close()

	m = re.search('(?<=NAME\=).+', c)

	return(m.group(0))

def baf_package_add_file_list(pkg):

	contents = list(set(pkg.getnames()))
	contents.sort()

	tf = tempfile.NamedTemporaryFile(mode="w+t")
	try:
		for item in contents:
			tf.write(item + "\n")
		tf.flush()

		pkg.add(tf.name, arcname="content.txt")
	finally:
		tf.close()

	return(0)

def baf_update_version ():

	pkg_size = 0
	for dirpath, dirnames, filenames in os.walk(baf_dirs['work']['dir']):
		for f in filenames:
			fp = os.path.join(dirpath, f)
			pkg_size += os.path.getsize(fp)

	vers_path = baf_get_version_template_name()

	fp = open(vers_path, "r")
	lines = fp.readlines()
	fp.close()

	fp = open(baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers'], "w")
	for line in lines:
		if line.find("SIZE=") != 0:
			fp.write(line)
	fp.write("SIZE=" + str(pkg_size) + "\n");
	fp.close()

	return(0)

def baf_package_create():

	pkg_base_name = baf_package_get_name()

	if len(pkg_base_name) is 0:
		pkg_base_name = "userappfs"

	pkg_name = datetime.datetime.now().strftime(baf_dirs['pkg']['dir'] + "/" + baf_package_get_name() + "-%Y-%m-%d_%H_%M_%S.tar.gz")
	baf_update_version()

	try:
		pkg = tarfile.open(pkg_name, "w:gz")
	except TarError:
		print " ! Could not open " + pkg_name + " for writing, leaving."
		return(1)
	else:
		repo_name=baf_package_get_name()
		if repo_name is False:
			print " ! Could not retrieve name of repository, leaving."
			pkg.close()
			return(1)

		pkg.add(baf_dirs['work']['dir'] + "/" + baf_dirs['work']['sub'] + "/", arcname=repo_name)
		pkg.add(baf_dirs['pkginfo']['dir'] + "/" + baf_file['vers'], arcname=baf_file['vers'])
		baf_package_add_file_list(pkg)
		pkg.close()

	print " * saved UserAppFS to '" + os.getcwd() + "/" + pkg_name + "'"

	return(0)

def baf_make():

	if baf_conf_read() is 'none':
		print " ! not a valid baf app, leaving."
		return(1)

	if os.path.exists(baf_dirs['work']['dir']):
		print " * found old 'work' directory, removing."
		shutil.rmtree(baf_dirs['work']['dir'])

	if baf_info_update():
		return(1)

	try:
		print " * creating new 'work' directory..."
		os.mkdir(baf_dirs['work']['dir'])
	except OSError:
		print " ! Could not create '" + baf_dirs['work']['dir'] + "', leaving."
		return(1)
	else:
		pat_ignore = (baf_file['init'],  baf_file['cron'], baf_file['fsex'])
		shutil.copytree(baf_dirs['template']['dir'], baf_dirs['work']['dir'] + "/" + baf_dirs['work']['sub'],
				ignore=shutil.ignore_patterns(*pat_ignore))

	print " * compiling modules..."
	modules = os.listdir(baf_dirs['modules']['dir'])
	for module in modules:
		baf_module_compile(module)

	print " * installing modules..."
	for module in modules:
		if baf_module_install(module):
			print " ! Could not install module '" + module + "', leaving."
			return(1)

	print " * creating package..."
	if baf_package_create():
		print " ! Could not create package, leaving."
		return(1)

	return(0)

def baf_deploy(host, app_file=None):

	if baf_conf_read() is 'none':
		print " ! not a valid baf app, leaving."
		return(1)

	if not 'ssh_keyfile' in baf_conf:
		print " ! No SSH keyfile given, leaving."
		return(2)

	if not os.path.exists(baf_conf['ssh_keyfile']):
		print " ! SSH keyfile does not exist, leaving."
		return(3)

	path_l = os.getcwd() + '/pkg'
	path_r = '/tmp/images'

	if app_file is None:
		filelist = os.listdir(path_l)
		filelist = filter(lambda x: not os.path.isdir(path_l + '/' + x), filelist)
		app_file = max(filelist, key=lambda x: os.stat(path_l + '/' + x).st_mtime)

	if not os.path.exists(path_l + '/' + app_file):
		print " ! file '" + app_file + "' does not exist."
		return(4)

	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	ssh.connect(host, username='root', key_filename=baf_conf['ssh_keyfile'])

	ssh.exec_command('mkdir -p ' + path_r)

	print " * Uploading file " + path_l + "/" + app_file + " to " + host + ":" + path_r + "."
	ftp = ssh.open_sftp()
	ftp.put(path_l + '/' + app_file, path_r + '/' + app_file)
	ftp.close()

	print " * Installing " + app_file + " on " + host + "."
	stdin, stdout, stderr = ssh.exec_command('/usr/local/sbin/install.sh ' + app_file)
	type(stdin)

	print " * Installation Log:"
	for line in stdout.readlines():
		print "   - " + line.rstrip('\n')

	ssh.exec_command('rm -f ' + path_r + '/' + app_file)
	ssh.close()

	return(0)

def baf_module_create(name):

	if not os.path.isdir(baf_dirs['modules']['dir']):
		print " ! modules directory not found, leaving."
		return(1)

	if os.path.isdir(baf_dirs['modules']['dir'] + "/" + name):
		print " ! module '" + name + "' already exists, leaving."
		return(1)

	try:
		print " * creating module '" + name + "'..."
		os.mkdir(baf_dirs['modules']['dir'] + "/" + name)
	except OSError:
		print " ! Could not create '" + baf_dirs['modules']['dir'] + "/" + name + "', leaving."
		return(1)
	else:
		for sub_dir in baf_dirs['module']['sub']:
			dir_name = baf_dirs['modules']['dir'] + "/" + name + "/" + sub_dir
			try:
				os.mkdir(dir_name)
			except OSError:
				print " ! Could not create '" + dir_name + "', leaving."
				return(1)

	f_name = baf_dirs['modules']['dir'] + "/" + name + "/Makefile"
	try:
		f = open(f_name, "w")
	except IOError:
		print " ! Could not open '" + f_name + "' for writing, leaving."
		return(1)
	else:
		for line in baf_templates['module-Makefile']:
			f.write(line)
			if line == "CUR_DIR\t\t:= $(shell pwd)\n":
				f.write("BAF_DIR\t\t:= " + baf_conf['toolchain'] + "\n\n")
		f.close()

	open(baf_dirs['modules']['dir'] + "/" + name + "/" + "mod_files.lst", "w").close()

	return(0)

def baf_module_delete(name):

	if os.path.isdir(baf_dirs['modules']['dir'] + "/" + name) is False:
		print " ! module '" + name + "' does not exist, leaving."
		return(1)

	print " * deleting module '" + name + "'..."
	shutil.rmtree(baf_dirs['modules']['dir'] + "/" + name)

	return(0)

def baf_module_compile(name):

	if os.path.exists(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED"):
		print " ! module '" + name + "' disabled, leaving."
		return(0)

	if not os.path.exists(baf_dirs['modules']['dir'] + "/" + name + "/Makefile"):
		print "  * no Makefile for module '" + name + "' found, leaving."
		return(0)

	base_dir = os.getcwd()

	os.chdir(baf_dirs['modules']['dir'] + "/" + name)

	print "  * compiling module '" + name + "'..."
	ret = os.system("make -s")
#	if ret is 0:
#		ret = os.system("make install -s")

	os.chdir(base_dir)

	return(ret)

def baf_module_install(name):

	if os.path.exists(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED"):
		print " ! module '" + name + "' disabled, leaving."
		return(0)

	if not os.path.isdir(baf_dirs['work']['dir']):
		print " ! work directory does not exist, leaving."
		return(1)

	print "  * installing module '" + name + "'..."

	f_name = baf_dirs['modules']['dir'] + "/" + name + "/mod_files.lst"
	try:
		f = open(f_name, "r")
	except IOError:
		print " ! Could not open '" + f_name + "' for writing, leaving."
		return(1)
	else:
		i = 0
		for line in f.readlines():
			i += 1
			if len(line.rstrip('\n')) is not 0 and line[0] is not '#':
				src_tgt = line.split("=>")
				if len(src_tgt) is not 2:
					print "   ! File '" + f_name + "' malformatted at line " + str(i) + ", leaving."
					f.close()
					return(1)

				src = (baf_dirs['modules']['dir']+ "/" + name + "/" + src_tgt[0]).rstrip('\n')
				tgt = (baf_dirs['work']['dir'] + "/" + baf_dirs['work']['sub'] + "/" + src_tgt[1]).rstrip('\n')

				if not os.path.exists(src):
					print "   ! file '" + src + "' listed in '" + f_name + "' does not exist, skipping!"
				else:
					if not os.path.exists(os.path.dirname(tgt)):
						os.makedirs(os.path.dirname(tgt))

					print "   * copying file '" + src + "' to '" + tgt + "'..."
					if os.path.islink(src):
						src_lnk = os.readlink(src)
						os.symlink(src_lnk, tgt)
					else:
						shutil.copy(src, tgt)
		f.close()

	return(0)

def baf_module_enable(name):

	print " * enabling module '" + name + "'..."
	if os.path.exists(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED"):
		os.remove(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED")

	return(0)

def baf_module_disable(name):

	print " * disabling module '" + name + "'..."
	if not os.path.exists(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED"):
		open(baf_dirs['modules']['dir'] + "/" + name + "/DISABLED", "w").close()

	return(0)

def baf_module_get_pkgs(repo):

	sect = ['name', 'file', 'url', 'desc']
	lines = []
	pkgs = []

	try:
		mod_lst = urllib2.urlopen(repo)
	except urllib2.HTTPError, e:
		print " ! Could not open '" + repo + "' (HTTP Error " + str(e.code) + "), leaving."
		return(False)
	else:
		for item in mod_lst.readlines():
			if len(item.rstrip('\n')) is not 0 and item[0] is not '#':
				lines.append(item.rstrip('\n'))
		mod_lst.close()

	i = 0
	for line in lines:
		pkg = {}
		j = 0
		for item in line.rsplit(','):
			pkg[sect[j]] = item.strip()
			j += 1
			if j is 3:
				break
		pkg[sect[j]] = re.search('"(.*)"$', line, re.M | re.I).group(1)
		pkgs.append(pkg)
		i += 1

	return(pkgs)

def baf_module_pkg_print(pkg):

	for k, v in pkg.iteritems():
		if k == 'desc':
			print " " + k + ": " + v.strip('"')
		else:
			print " " + k + ": " + v

	print ""

	return(0)

def baf_module_pkg_list():

	pkgs = baf_module_get_pkgs(baf_conf['repository'])
	if pkgs is False:
		return(1)

	print "Listing modules from " + baf_conf['repository'] + ":\n"

	for pkg in pkgs:
		baf_module_pkg_print(pkg)

	return(0)

def baf_module_pkg_search(term):

	ret = 0

	pkgs = baf_module_get_pkgs(baf_conf['repository'])
	if pkgs is False:
		return(ret)

	print "Searching for '" + term + "' in " + baf_conf['repository'] + ".\n"
	for pkg in pkgs:
		for k, v in pkg.iteritems():
			if term in v:
				baf_module_pkg_print(pkg)
				ret += 1
				break
	print "Found " + str(ret) + " modules for search term '" + term + "'.\n"

	return(ret)

def baf_module_pkg_fetch(pkg):

	if os.path.exists(baf_dirs['modules']['dir'] + "/" + pkg['name']):
		shutil.rmtree(baf_dirs['modules']['dir'] + "/" + pkg['name'])

	try:
		u = urllib2.urlopen(pkg['url'])
	except urllib2.HTTPError, e:
		print " ! Could not open '" + pkg['url'] + "' (HTTP Error " + str(e.code) + "), leaving."
		return(1)
	else:
		try:
			f = open("/tmp/" + pkg['file'], "w")
		except IOError:
			print " ! Could not open '/tmp/" + pkg['file'] + "' for writing."
			u.close()
			return(1)
		else:
			f.write(u.read())
			f.close()
		u.close()

	try:
		tf = tarfile.open("/tmp/" + pkg['file'], "r:gz")
	except TarError:
		print " ! Could not open '/tmp/" + pkg['file'] + "' for reading, leaving."
		return(1)
	else:
		tf.extractall(path=baf_dirs['modules']['dir'])
		tf.close()

	return(0)

def baf_module_pkg_install(pkg_name):

	pkgs = baf_module_get_pkgs(baf_conf['repository'])

	for pkg in pkgs:
		if pkg['name'] == pkg_name:
			baf_module_pkg_fetch(pkg)
			print " * Downloaded and installed module '" + pkg['name'] + "'."
			return(0)

	print " ! Could not find module '" + pkg_name + "' for install!"
	print " ! Please search for the correct name of the module you want to install!"

	return(1)

def baf_module(args):

	if baf_conf_read() is 'none':
		print " ! not a valid baf app, leaving."
		return(1)

	if len(args) is 3:
		if args[2] == "list":
			return(baf_module_pkg_list())
	elif len(args) is 4:
		if args[2] == "create":
			return(baf_module_create(args[3]))
		elif args[2] == "search":
			return(baf_module_pkg_search(args[3]))
		elif args[2] == "install":
			return(baf_module_pkg_install(args[3]))

		if not os.path.exists(baf_dirs['modules']['dir'] + "/" + args[3]):
			print " ! module '" + args[3] + "' does not exist, leaving."
			return(1)

		if args[2] == "delete":
			return(baf_module_delete(args[3]))
		elif args[2] == "compile":
			return(baf_module_compile(args[3]))
		elif args[2] == "enable":
			return(baf_module_enable(args[3]))
		elif args[2] == "disable":
			return(baf_module_disable(args[3]))

	print " ! invalid command, use 'baf help module' to get information about usage."
	return(1)

def baf_conf_read():

	cur_path = os.getcwd()
	wrk_path = cur_path

	while wrk_path is not '/' and os.path.isfile(wrk_path + '/' + baf_file['conf']) is not True:
		os.chdir('..')
		wrk_path = os.getcwd()

	if wrk_path is '/':
		print " ! Configuration file '" + baf_file['conf'] + "' not found, leaving."
		os.chdir(cur_path)
		return('none')

	try:
		f = open(baf_file['conf'], "r")
	except IOError:
		print " ! Configuration file '" + baf_file['conf'] + "' not readable, leaving."
		os.chdir(cur_path)
		return('none')
	else:
		for line in f.readlines():
			if len(line.rstrip('\n')) is not 0 and line[0] is not '#':
				k, v = line.rstrip("\n").rsplit("=")
				baf_conf[k] = v
		f.close()

	# (re-) create missing directories
	if not os.path.exists(baf_dirs['modules']['dir']):
		os.mkdir(baf_dirs['modules']['dir'])

	if not os.path.exists(baf_dirs['pkg']['dir']):
		os.mkdir(baf_dirs['pkg']['dir'])

	return(cur_path)

def baf_conf_init():

	try:
		f = open(baf_file['conf'], "w")
	except IOError:
		print " ! Could not open '" + baf_file['conf'] + "' for writing, leaving."
		return(1)
	else:
		for k, v in baf_templates[baf_file['conf']].iteritems():
			f.write(k + "=" + v + "\n")
		f.close()

	return(0)

def main():

	if len(sys.argv) is 2:
		if sys.argv[1] == "help":
			sys.exit(baf_help_print('main', 'main'))
		elif sys.argv[1] == "make":
			sys.exit(baf_make())
		elif sys.argv[1] == "init-conf":
			print " * Creating .baf.conf in current directory.\n"
			print " ! Make sure this is this the root-directory of your baf-app.\n"
			sys.exit(baf_conf_init());
	elif len(sys.argv) is 3:
		if sys.argv[1] == "help":
			sys.exit(baf_help_print(sys.argv[2], 'main'))
		elif sys.argv[1] == "create":
			sys.exit(baf_create(sys.argv[2]))
		elif sys.argv[1] == "module":
			sys.exit(baf_module(sys.argv))
		elif sys.argv[1] == "deploy":
			sys.exit(baf_deploy(sys.argv[2]))
	elif len(sys.argv) is 4:
		if sys.argv[1] == "help":
			sys.exit(baf_help_print(sys.argv[2], sys.argv[3]))
		elif sys.argv[1] == "module":
			sys.exit(baf_module(sys.argv))
		elif sys.argv[1] == "deploy":
			sys.exit(baf_deploy(sys.argv[2], sys.argv[3]))

	baf_help_print('main', 'main')
	sys.exit(1)

if __name__ == "__main__":
	main()
